version: '3.1'

services:

  auth_db:
    container_name: auth_db
    image: postgres:11
    restart: always
    environment:
      POSTGRES_PASSWORD: auth_db
      POSTGRES_DB: auth_db
      POSTGRES_USER: auth_db
      PORT: 5432
    ports:
      - "5432:5432"

  product_db:
    container_name: product_db
    image: mysql:8.0.31
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: product_db
      MYSQL_ALLOW_EMPTY_PASSWORD: product_db
      MYSQL_RANDOM_ROOT_PASSWORD: product_db
      MYSQL_PASSWORD: product_db
      MYSQL_DATABASE: product_db
      MYSQL_USER: product_db
      PORT: 5433
    ports:
      - "3306:3306"
    volumes:
      -  "mysqldb:/var/lib/mysql"
  sales-db:
    image: mongo
    container_name: sales-db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: sales
      MONGO_INITDB_ROOT_PASSWORD: sales
      MONGO_INITDB_DATABASE: sales
      PORT: 27017
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    ports:
      - "27017:27017"
      - "28017:28017"
  sales_rabbit:
    image: rabbitmq:3-management
    container_name: sales_rabbit
    restart: always
    ports:
      - 5672:5672
      - 25676:25676
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: rabbit
      RABBITMQ_DEFAULT_PASS: rabbit
  auth-api:
    build: './auth-api'
    volumes:
      - ./auth-api:/app
      - nodemodulesauth:/app/node_modules
    restart: on-failure
    command: npm run start
    environment:
      - PORT=8080
    ports:
      - "8080:8080"
    depends_on:
      - "auth_db"

  productapi:
    container_name: productapi
    build: "./productapi"
    ports:
      - "8081:8081"
    depends_on:
      - "product_db"

  sales-api:
    build: './sales-api'
    restart: on-failure
    command: npm run start
    environment:
      PORT: 8082
    ports:
      - "8082:8082"
    depends_on:
      - "sales_db"
    volumes:
      - "./sales-api:/app"
      - "nodemodulessales:/app/node_modules"
volumes:
  nodemodulesauth: {}
  mysqldb: {}
  nodemodulessales: {}
  postgres-data: {}


networks:
  network-api:
    driver: bridge