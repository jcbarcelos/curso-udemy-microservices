version: '3.8'

services:

  auth_db:
    image: postgres:11
    restart: always
    environment:
      POSTGRES_PASSWORD: auth_db
      POSTGRES_DB: auth_db
      POSTGRES_USER: auth_db
      PORT: 5432
    ports:
      - 5432:5432
    networks:
      - microservices

  product_db:
    image: postgres:11
    restart: always
    environment:
      POSTGRES_PASSWORD: product_db
      POSTGRES_DB: product_db
      POSTGRES_USER: product_db
    ports:
      - 5433:5432
    networks:
      - microservices

  sales-db:
    image: mongo
    container_name: sales-db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: sales
      MONGO_INITDB_ROOT_PASSWORD: sales
      MONGO_INITDB_DATABASE: sales
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    ports:
      - 27017:27017
      - 28017:28017
    networks:
      - microservices

  sales_rabbit:
    image: rabbitmq:3-management
    container_name: sales_rabbit
    restart: always
    ports:
      - 5672:5672
      - 25676:25676
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: rabbit
      RABBITMQ_DEFAULT_PASS: rabbit
    networks:
      - microservices

  auth-api:
    build: './auth-api'
    volumes:
      - ./auth-api:/app
      - nodemodulesauth:/app/node_modules
    restart: on-failure
    command: npm run start
    environment:
      - PORT=8080
    ports:
      - 8080:8080
    depends_on:
      - auth_db
    networks:
      - microservices

  product-api:
    build: './product-api'
    environment:
      - PORT=8081
    ports:
      - 8081:8081
    depends_on:
      - product_db
    volumes:
      - ./product-api:/app
      - nodemodulesproduct:/app/node_modules
    networks:
      - microservices

  sales-api:
    build: './sales-api'
    restart: on-failure
    command: npm run start
    environment:
      - PORT=8082
    ports:
      - 8082:8082
    # depends_on:
    #   - sales_db
    volumes:
      - ./sales-api:/app
      - nodemodulessales:/app/node_modules
    networks:
      - microservices


volumes:
  nodemodulesauth: {}
  nodemodulesproduct: {}
  nodemodulessales: {}

networks:
  microservices: 
    driver:
        bridge


    